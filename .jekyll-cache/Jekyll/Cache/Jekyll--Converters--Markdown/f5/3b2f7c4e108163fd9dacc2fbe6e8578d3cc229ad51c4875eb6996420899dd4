I"&<p>Nomad from <a href="http://github.com/hashicorp/nomad">Hashicorp</a>! Another container orchestrator. Similar to Kubernetes, Mesos, and Docker Swarm.</p>

<p>IMO, the best way to learn about containers is by <em>example</em>. Than what better way than to run Nomad in a container.</p>

<p>If you haven’t heard of Kubernetes (k8s for short) or any of those hip and happening container tools I would suggest looking at this great k8s <a href="https://labs.ctl.io/what-is-kubernetes-and-how-to-use-it/">article</a>.</p>

<p>Now onto the fun part!</p>

<h3 id="build-nomad">Build Nomad</h3>

<p>First, let’s build Nomad. You’ll need <strong>Go</strong> for this.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get github.com/hashicorp/nomad
<span class="nb">cd</span> <span class="nv">$GOPATH</span>/src/github.com/hashicorp/nomad
make bin
</code></pre></div></div>

<p>After that’s completed you’ll find the Nomad binary blob in the <strong>/bin</strong> folder.</p>

<h3 id="build-the-docker-container">Build the Docker container</h3>

<p>Here’s the entire Dockerfile for Nomad (small ‘init?)</p>

<p>Before that, copy your built binary blob to the same folder where your Dockerfile will be.</p>

<pre><code class="language-Dockerfile">FROM debian:8
MAINTAINER Charlie Drage &lt;charlie@charliedrage.com&gt;

# Needed for ca-certificates :)
# See error: "x509: failed to load system roots and no roots provided"
RUN apt-get update &amp;&amp; \
    apt-get install -y ca-certificates

EXPOSE :4646
EXPOSE :4647
EXPOSE :4648

COPY nomad /nomad

ENTRYPOINT ["/nomad"]
</code></pre>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>▶ docker build <span class="nt">-t</span> <span class="nv">$USER</span>/nomad <span class="nb">.</span>
Sending build context to Docker daemon 22.06 MB
Sending build context to Docker daemon 
Step 0 : FROM debian:8
 <span class="nt">---</span><span class="o">&gt;</span> bf84c1d84a8f
Step 1 : MAINTAINER Charlie Drage &lt;charlie@charliedrage.com&gt;
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> bc3244625ab2
Step 2 : RUN apt-get update <span class="o">&amp;&amp;</span>     apt-get <span class="nb">install</span> <span class="nt">-y</span> ca-certificates
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> 217fda8a17b4
Step 3 : EXPOSE :4646
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> e1b642932e0f
Step 4 : EXPOSE :4647
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> 19b8ee64657c
Step 5 : EXPOSE :4648
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> 5c5450ca4567
Step 6 : COPY nomad /nomad
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> 78f16ddd6880
Step 7 : ENTRYPOINT /nomad
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> eea5b9b75cc8
Successfully built eea5b9b75cc8
</code></pre></div></div>

<h3 id="now-run-it">Now run it!</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="se">\</span>
  <span class="nt">--net</span><span class="o">=</span>host <span class="se">\</span>
  <span class="nt">-v</span> /run/docker.sock:/run/docker.sock <span class="se">\</span>
  <span class="nt">--name</span> nomad <span class="se">\</span>
  <span class="nt">-p</span> 4646:4646 <span class="se">\</span>
  <span class="nt">-p</span> 4647:4647 <span class="se">\</span>
  <span class="nt">-p</span> 4648:4648 <span class="se">\</span>
  <span class="nv">$USER</span>/nomad agent <span class="nt">-dev</span> <span class="nt">-network-interface</span> YOURINTERFACE<span class="o">(</span>eth0 probably<span class="o">)</span>
...
<span class="o">==&gt;</span> Starting Nomad agent...
2015/10/24 18:58:22 <span class="o">[</span>ERR] fingerprint.env_aws: Error querying AWS Metadata URL, skipping
<span class="o">==&gt;</span> Nomad agent configuration:

                 Atlas: &lt;disabled&gt;
                Client: <span class="nb">true
             </span>Log Level: DEBUG
                Region: global <span class="o">(</span>DC: dc1<span class="o">)</span>
                Server: <span class="nb">true</span>

<span class="o">==&gt;</span> Nomad agent started! Log data will stream <span class="k">in </span>below:

    2015/10/24 18:58:20 <span class="o">[</span>INFO] serf: EventMemberJoin: root.global 127.0.0.1
    2015/10/24 18:58:20 <span class="o">[</span>INFO] nomad: starting 4 scheduling worker<span class="o">(</span>s<span class="o">)</span> <span class="k">for</span> <span class="o">[</span>service batch _core]
    2015/10/24 18:58:20 <span class="o">[</span>INFO] client: using alloc directory /tmp/NomadClient032777845
    2015/10/24 18:58:20 <span class="o">[</span>INFO] raft: Node at 127.0.0.1:4647 <span class="o">[</span>Follower] entering Follower state
    2015/10/24 18:58:20 <span class="o">[</span>INFO] nomad: adding server root.global <span class="o">(</span>Addr: 127.0.0.1:4647<span class="o">)</span> <span class="o">(</span>DC: dc1<span class="o">)</span>
    2015/10/24 18:58:20 <span class="o">[</span>WARN] fingerprint.network: Unable to <span class="nb">read link </span>speed from /sys/class/net/wlan0/speed
    2015/10/24 18:58:20 <span class="o">[</span>DEBUG] fingerprint.network: Unable to <span class="nb">read link </span>speed<span class="p">;</span> setting to default 100
    2015/10/24 18:58:22 <span class="o">[</span>WARN] raft: Heartbeat <span class="nb">timeout </span>reached, starting election
    2015/10/24 18:58:22 <span class="o">[</span>INFO] raft: Node at 127.0.0.1:4647 <span class="o">[</span>Candidate] entering Candidate state
    2015/10/24 18:58:22 <span class="o">[</span>DEBUG] raft: Votes needed: 1
    2015/10/24 18:58:22 <span class="o">[</span>DEBUG] raft: Vote granted. Tally: 1
    2015/10/24 18:58:22 <span class="o">[</span>INFO] raft: Election won. Tally: 1
    2015/10/24 18:58:22 <span class="o">[</span>INFO] raft: Node at 127.0.0.1:4647 <span class="o">[</span>Leader] entering Leader state
    2015/10/24 18:58:22 <span class="o">[</span>INFO] raft: Disabling EnableSingleNode <span class="o">(</span>bootstrap<span class="o">)</span>
    2015/10/24 18:58:22 <span class="o">[</span>DEBUG] raft: Node 127.0.0.1:4647 updated peer <span class="nb">set</span> <span class="o">(</span>2<span class="o">)</span>: <span class="o">[</span>127.0.0.1:4647]
    2015/10/24 18:58:22 <span class="o">[</span>INFO] nomad: cluster leadership acquired
    2015/10/24 18:58:23 <span class="o">[</span>ERR] fingerprint.env_gce: Error querying GCE Metadata URL, skipping
    2015/10/24 18:58:23 <span class="o">[</span>DEBUG] client: applied fingerprints <span class="o">[</span><span class="nb">arch </span>cpu host memory storage network]
    2015/10/24 18:58:23 <span class="o">[</span>DEBUG] client: available drivers <span class="o">[</span>docker <span class="nb">exec</span><span class="o">]</span>
    2015/10/24 18:58:23 <span class="o">[</span>DEBUG] client: node registration <span class="nb">complete
    </span>2015/10/24 18:58:23 <span class="o">[</span>DEBUG] client: updated allocations at index 1 <span class="o">(</span>0 allocs<span class="o">)</span>
    2015/10/24 18:58:23 <span class="o">[</span>DEBUG] client: allocs: <span class="o">(</span>added 0<span class="o">)</span> <span class="o">(</span>removed 0<span class="o">)</span> <span class="o">(</span>updated 0<span class="o">)</span> <span class="o">(</span>ignore 0<span class="o">)</span>
    2015/10/24 18:58:23 <span class="o">[</span>DEBUG] client: state updated to ready

</code></pre></div></div>
<p>You’ll see that your Nomad container started successfully! If you want to run it as a daemon, add <strong>-d</strong> to the Docker run command.</p>

<h3 id="now-run-your-first-nomad-container">Now run your first Nomad container!</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>▶ docker <span class="nb">exec</span> <span class="nt">-it</span> nomad bash
root@root:/# ./nomad init
Example job file written to example.nomad
root@root:/# ./nomad run example.nomad 
<span class="o">==&gt;</span> Monitoring evaluation <span class="s2">"4602470b-a7e0-8a33-0e77-10654b103e58"</span>
    Evaluation triggered by job <span class="s2">"example"</span>
    Allocation <span class="s2">"327bedb4-32c9-b671-2b1d-66332debe6d2"</span> created: node <span class="s2">"ec84f514-9ce6-046f-bc1b-6b04d9a8c83b"</span>, group <span class="s2">"cache"</span>
    Evaluation status changed: <span class="s2">"pending"</span> -&gt; <span class="s2">"complete"</span>
<span class="o">==&gt;</span> Evaluation <span class="s2">"4602470b-a7e0-8a33-0e77-10654b103e58"</span> finished with status <span class="s2">"complete"</span>
root@root:/# 
</code></pre></div></div>

<p>There you have it! Go check out <strong>docker ps -a</strong> and you’ll see an example Redis container running.</p>

<p>Now start hacking and build!</p>

<p><strong>UPDATE:</strong> Keep in mind that you’re passing -v /run/docker.sock:/run/docker.sock to Nomad. You will <em>only</em> be able to use the Docker provider. If you’d like to use rkt or qemu feel free to run Nomad natively (perhaps in a systemd service).</p>
:ET